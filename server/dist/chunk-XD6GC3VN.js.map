{"version":3,"sources":["../src/views/sendPDfByPost.ts"],"names":["post","pdf","existingPdfDoc","existingPage","pdfBytes"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,mBAAmB;AAA5B,IAOa;AAPb;AAAA;AAEA;AACA;AACA;AACA;AAEO,IAAM,gBAAgB,OAAO,KAAc,QAAkB;AAChE,UAAI;AACA,cAAM,EAAE,OAAO,SAAS,MAAM,KAAK,IAAI,IAAI;AAE3C,cAAM,UAAU,MAAM,gCAAgC,OAAiB,SAAmB,IAAc;AAExG,YAAI,QAAQ,QAAQ;AAEhB,gBAAM,WAAW,KAAK,MAAM,QAAQ,OAAO;AAC3C,gBAAM,eAAsF,CAAC;AAC7F,gBAAM,aAAuB,CAAC,IAAc;AAE5C,mBAAS,QAAQ,CAAC,SAAyE,MAAc;AACrG,gBAAI,IAAI,GAAG;AACP,kBAAI,aAAa,QAAQ,IAAI,GAAG;AAC5B,6BAAa,QAAQ,IAAI,EAAE,KAAK,EAAE,IAAI,QAAQ,IAAI,MAAM,QAAQ,MAAM,YAAY,QAAQ,cAAc,GAAG,CAAC;AAAA,cAChH,OAAO;AACH,6BAAa,QAAQ,IAAI,IAAI,CAAC,EAAE,IAAI,QAAQ,IAAI,MAAM,QAAQ,MAAM,YAAY,QAAQ,cAAc,GAAG,CAAC;AAAA,cAC9G;AAAA,YACJ;AAAA,UACJ,CAAC;AAED,gBAAM,YAAY,MAAM,YAAY,OAAO;AAE3C,qBAAWA,SAAQ,YAAY;AAE3B,kBAAM,WAAW,MAAM,cAAcA,KAAI;AAGzC,kBAAM,iBAAiB,MAAM,YAAY,KAAK,QAAQ;AAGtD,kBAAM,CAAC,YAAY,IAAI,MAAM,UAAU,UAAU,gBAAgB,CAAC,CAAC,CAAC;AAGpE,sBAAU,QAAQ,YAAY;AAE9B,kBAAMC,OAAM,aAAaD,KAAI;AAE7B,uBAAW,MAAMC,MAAK;AAElB,kBAAI,GAAG,eAAe,IAAI;AACtB,sBAAM,gBAAgB,MAAM,YAAY,GAAG,UAAU;AAErD,sBAAMC,kBAAiB,MAAM,YAAY,KAAK,aAAa;AAE3D,sBAAM,CAACC,aAAY,IAAI,MAAM,UAAU,UAAUD,iBAAgB,CAAC,CAAC,CAAC;AAEpE,0BAAU,QAAQC,aAAY;AAAA,cAClC;AAEA,oBAAMC,YAAW,MAAM,QAAQ,GAAG,IAAI,GAAG,IAAI;AAG7C,oBAAMF,kBAAiB,MAAM,YAAY,KAAKE,SAAQ;AAGtD,oBAAM,CAACD,aAAY,IAAI,MAAM,UAAU,UAAUD,iBAAgB,CAAC,CAAC,CAAC;AAGpE,wBAAU,QAAQC,aAAY;AAAA,YAClC;AAAA,UACJ;AAEA,gBAAM,MAAM,MAAM,UAAU,KAAK;AAGjC,cAAI,UAAU,gBAAgB,iBAAiB;AAC/C,cAAI,UAAU,uBAAuB,qCAAqC;AAC1E,cAAI,KAAK,OAAO,KAAK,GAAG,CAAC;AAAA,QAC7B,OAAO;AACH,cAAI,OAAO,GAAG,EAAE,KAAK,gCAA0B;AAAA,QACnD;AAAA,MACJ,SAAS,OAAO;AACZ,gBAAQ,MAAM,4BAA4B,KAAK;AAC/C,YAAI,OAAO,GAAG,EAAE,KAAK,0BAA0B;AAAA,MACnD;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { PDFDocument } from \"pdf-lib\";\r\nimport { Request, Response } from \"express\";\r\nimport { exsitsThisListInProductionLists } from \"../models/production\";\r\nimport { generateCover } from \"./generateCover\";\r\nimport { getPage } from \"./getPage\";\r\nimport { generateObs } from \"./generateObs\";\r\n\r\nexport const sendPdfByPost = async (req: Request, res: Response) => {\r\n    try {\r\n        const { model, product, line, post } = req.query;\r\n\r\n        const content = await exsitsThisListInProductionLists(model as string, product as string, line as string) as { status: boolean, content: string };\r\n\r\n        if (content.status) {\r\n            \r\n            const jsonData = JSON.parse(content.content);\r\n            const postsContent: { [key: string]: { it: string, page: number, operations: string }[] } = {};\r\n            const postsUseds: string[] = [post as string];\r\n\r\n            jsonData.forEach((element: { post: string, it: string, page: number, operations: string }, i: number) => {\r\n                if (i > 0) {\r\n                    if (postsContent[element.post]) {\r\n                        postsContent[element.post].push({ it: element.it, page: element.page, operations: element.operations ?? '' });\r\n                    } else {\r\n                        postsContent[element.post] = [{ it: element.it, page: element.page, operations: element.operations ?? '' }];\r\n                    }\r\n                }\r\n            });\r\n\r\n            const newPdfDoc = await PDFDocument.create();\r\n\r\n            for (const post of postsUseds) {\r\n                // Gera os bytes do PDF\r\n                const pdfBytes = await generateCover(post);\r\n\r\n                // Carrega os bytes do PDF gerado\r\n                const existingPdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n                // Copia todas as páginas do PDF existente para o novo PDF\r\n                const [existingPage] = await newPdfDoc.copyPages(existingPdfDoc, [0]);\r\n\r\n                // Adiciona a página copiada ao novo PDF\r\n                newPdfDoc.addPage(existingPage);\r\n\r\n                const pdf = postsContent[post];\r\n\r\n                for (const el of pdf) {\r\n\r\n                    if (el.operations !== '') {\r\n                        const pdfBytesCover = await generateObs(el.operations)\r\n                        // Carrega os bytes do PDF gerado\r\n                        const existingPdfDoc = await PDFDocument.load(pdfBytesCover);\r\n                        // Copia todas as páginas do PDF existente para o novo PDF\r\n                        const [existingPage] = await newPdfDoc.copyPages(existingPdfDoc, [0]);\r\n                        // Adiciona a página copiada ao novo PDF\r\n                        newPdfDoc.addPage(existingPage);\r\n                    }\r\n\r\n                    const pdfBytes = await getPage(el.it, el.page);\r\n\r\n                    // Carrega os bytes do PDF gerado\r\n                    const existingPdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n                    // Copia todas as páginas do PDF existente para o novo PDF\r\n                    const [existingPage] = await newPdfDoc.copyPages(existingPdfDoc, [0]);\r\n\r\n                    // Adiciona a página copiada ao novo PDF\r\n                    newPdfDoc.addPage(existingPage);\r\n                }\r\n            }\r\n\r\n            const pdf = await newPdfDoc.save();\r\n\r\n            // Envia o novo documento PDF como resposta\r\n            res.setHeader('Content-Type', 'application/pdf');\r\n            res.setHeader('Content-Disposition', 'inline; filename=extracted_page.pdf');\r\n            res.send(Buffer.from(pdf));\r\n        } else {\r\n            res.status(404).send('Conteúdo não encontrado.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Erro ao processar o PDF:', error);\r\n        res.status(500).send('Erro ao processar o PDF.');\r\n    }\r\n};"]}
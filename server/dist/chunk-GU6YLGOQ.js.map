{"version":3,"sources":["../src/views/getPage.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,mBAAmB;AAC5B,OAAO,UAAU;AACjB,OAAO,QAAQ;AAFf,IAKa;AALb;AAAA;AAKO,IAAM,UAAU,OAAO,IAAY,eAA4C;AAClF,UAAI;AACA,cAAM,SAAS,KAAK,QAAQ,WAAW,cAAc,EAAE,MAAM;AAC7D,cAAM,YAAY,GAAG,aAAa,MAAM;AACxC,cAAM,SAAS,MAAM,YAAY,KAAK,SAAS;AAC/C,cAAM,YAAY,MAAM,YAAY,OAAO;AAC3C,cAAM,CAAC,IAAI,IAAI,MAAM,UAAU,UAAU,QAAQ,CAAC,aAAa,CAAC,CAAC;AACjE,cAAM,UAAU,QAAQ,IAAI;AAC5B,cAAM,WAAW,MAAM,UAAU,KAAK;AACtC,eAAO;AAAA,MACX,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { PDFDocument } from \"pdf-lib\";\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\n\r\n// para pegar a página especifica da it\r\nexport const getPage = async (it: string, pageNumber: number): Promise<Uint8Array> => {\r\n    try {\r\n        const ITpath = path.resolve(__dirname, `../../_its/${it}.pdf`)\r\n        const pdfBuffer = fs.readFileSync(ITpath);\r\n        const pdfDoc = await PDFDocument.load(pdfBuffer);\r\n        const newPdfDoc = await PDFDocument.create();\r\n        const [page] = await newPdfDoc.copyPages(pdfDoc, [pageNumber - 1]); // Copia a primeira página\r\n        await newPdfDoc.addPage(page);\r\n        const pdfBytes = await newPdfDoc.save();\r\n        return pdfBytes;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};"]}
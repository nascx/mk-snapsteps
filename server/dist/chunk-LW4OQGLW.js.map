{"version":3,"sources":["../src/models/production.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAEa,8BAwBA,+BAwBA,gCAyBA,uCAmDA,iCAwBA,8BAqBA;AA3Kb;AAAA;AAAA;AAEO,IAAM,+BAA+B,OAAO,OAAe,SAAiB,SAAiB;AAChG,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,OAAO,SAAS,IAAI,GAAG,CAAC,KAAK,SAAS;AACrD,gBAAI,KAAK;AACL,sBAAQ,IAAI,oEAA8D,GAAG;AAC7E,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI,4BAA4B;AACxC,oBAAM,UAAU,KAAK,MAAM,KAAK,CAAC,EAAE,OAAO;AAC1C,sBAAQ,EAAE,QAAQ,MAAM,QAAiB,CAAC;AAAA,YAC9C,OAAO;AACH,sBAAQ,IAAI,qGAAmF;AAC/F,sBAAQ,EAAE,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC;AAAA,YAC1C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAEO,IAAM,gCAAgC,OAAO,OAAe,YAAoB;AACnF,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,OAAO,OAAO,GAAG,CAAC,KAAK,SAAS;AAC/C,gBAAI,KAAK;AACL,sBAAQ,IAAI,gEAAgE,GAAG;AAC/E,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI,4BAA4B;AACxC,oBAAM,UAAU,KAAK,MAAM,KAAK,CAAC,EAAE,OAAO;AAC1C,sBAAQ,EAAE,QAAQ,MAAM,QAAiB,CAAC;AAAA,YAC9C,OAAO;AACH,sBAAQ,IAAI,iGAAqF;AACjG,sBAAQ,EAAE,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC;AAAA,YAC1C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAEO,IAAM,iCAAiC,YAAY;AACtD,UAAI;AACA,cAAM,IAAI;AACV,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,GAAG,MAAM,GAAG,CAAC,KAAK,SAAS;AAC7B,gBAAI,KAAK;AACL,sBAAQ,IAAI,uDAAiD;AAC7D,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,oBAAM,SAAS,KAAK,IAAI,CAAC,QAA2B;AAChD,uBAAO,EAAE,OAAO,IAAI,OAAO,OAAO,IAAI,MAAM;AAAA,cAChD,CAAC;AACD,oBAAM,WAAW,KAAK,IAAI,CAAC,QAA6B;AACpD,uBAAO,EAAE,OAAO,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,cACpD,CAAC;AACD,sBAAQ,EAAE,QAAQ,SAAS,CAAC;AAAA,YAChC;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAEO,IAAM,wCAAwC,YAAY;AAC7D,UAAI;AACA,cAAM,IAAI;AACV,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,GAAG,MAAM,GAAG,CAAC,KAAK,SAAS;AAC7B,gBAAI,KAAK;AACL,sBAAQ,IAAI,uDAAiD;AAC7D,qBAAO,GAAG;AAAA,YACd;AACA,kBAAM,SAA8D,CAAC;AAErE,gBAAI,QAAQ,KAAK,SAAS,GAAG;AAEzB,mBAAK,IAAI,CAAC,QAA2B;AACjC,oBAAI,CAAC,OAAO,IAAI,KAAK,GAAG;AACpB,yBAAO,IAAI,KAAK,IAAI,EAAE,OAAO,IAAI,OAAO,OAAO,IAAI,MAAM;AAAA,gBAC7D;AACA,uBAAO,EAAE,OAAO,IAAI,OAAO,OAAO,IAAI,MAAM;AAAA,cAChD,CAAC;AAED,oBAAM,WAAgE,CAAC;AACvE,mBAAK,IAAI,CAAC,QAA6B;AACnC,oBAAI,CAAC,SAAS,IAAI,OAAO,GAAG;AACxB,2BAAS,IAAI,OAAO,IAAI,EAAE,OAAO,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,gBACrE;AACA,uBAAO,EAAE,OAAO,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,cACpD,CAAC;AACD,oBAAM,QAA6D,CAAC;AACpE,mBAAK,IAAI,CAAC,QAA0B;AAChC,oBAAI,CAAC,MAAM,IAAI,IAAI,GAAG;AAClB,wBAAM,IAAI,IAAI,IAAI,EAAE,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK;AAAA,gBACzD;AACA,uBAAO,EAAE,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK;AAAA,cAC9C,CAAC;AAED;AAAA,gBACI;AAAA,kBACI,QAAQ,OAAO,KAAK,MAAM,EAAE,IAAI,SAAO,OAAO,GAAG,CAAC;AAAA,kBAClD,UAAU,OAAO,KAAK,QAAQ,EAAE,IAAI,SAAO,SAAS,GAAG,CAAC;AAAA,kBACxD,OAAO,OAAO,KAAK,KAAK,EAAE,IAAI,SAAO,MAAM,GAAG,CAAC;AAAA,gBACnD;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,kCAAkC,CAAC,OAAe,SAAiB,SAAiB;AAC7F,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,OAAO,SAAS,IAAI;AACpC,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,iEAA2D;AACvE,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI,gFAAgF;AAC5F,sBAAQ,EAAE,QAAQ,MAAM,SAAS,KAAK,CAAC,EAAE,QAAQ,CAAC;AAAA,YACtD,OAAO;AACH,sBAAQ,EAAE,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC;AAAA,YAC1C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,+BAA+B,OAAO,OAAe,SAAiB,MAAc,YAAoB;AACjH,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,OAAO,SAAS,MAAM,OAAO,GAAG,CAAC,KAAK,SAAS;AAC9D,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,eAAe,GAAG;AAC/B,sBAAQ,mEAA6D;AAAA,YACzE,OAAO;AACH,qBAAO,+DAAyD;AAAA,YACpE;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,8BAA8B,CAAC,OAAe,SAAiB,MAAc,YAAoB;AAC1G,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,SAAS,OAAO,SAAS,IAAI;AAC7C,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,sEAAgE,GAAG;AAC/E,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,KAAK,eAAe,GAAG;AACvB,sBAAQ,IAAI,yEAAmE,IAAI;AACnF,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,0FAAiF;AAC7F,qBAAO,8DAAwD;AAAA,YACnE;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { db } from \"../config/db\";\r\n\r\nexport const getContentFromProductionList = async (model: string, product: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT content FROM production_lists WHERE model = ? AND product = ? AND line = ?'\r\n            await db.query(q, [model, product, line], (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por lista na tabela de listas de produção: ', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Dados obtidos com sucesso!')\r\n                    const content = JSON.parse(data[0].content)\r\n                    resolve({ status: true, content: content })\r\n                } else {\r\n                    console.log('Não existe uma lista na tabela de listas de produção que satizfaça essa condição.')\r\n                    resolve({ status: false, content: [] })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const getContentFromEngineeringList = async (model: string, product: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT content FROM engineering_lists WHERE model = ? AND product = ?'\r\n            await db.query(q, [model, product], (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por lista na tabela de listas de engenharia: ', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Dados obtidos com sucesso!')\r\n                    const content = JSON.parse(data[0].content)\r\n                    resolve({ status: true, content: content })\r\n                } else {\r\n                    console.log('Não existe uma lista na tabela de listas de engenharia que satizfaça essa condição.')\r\n                    resolve({ status: false, content: [] })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const searchByModelAndProductOptions = async () => {\r\n    try {\r\n        const q = 'SELECT model, product FROM production_lists'\r\n        return new Promise(async (resolve, reject) => {\r\n            await db.query(q, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por opções de Modelos e produtos')\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    const models = data.map((row: { model: string }) => {\r\n                        return { label: row.model, value: row.model }\r\n                    })\r\n                    const products = data.map((row: { product: string }) => {\r\n                        return { label: row.product, value: row.product }\r\n                    })\r\n                    resolve({ models, products })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const searchByModelAndProductOptionsAndLine = async () => {\r\n    try {\r\n        const q = 'SELECT model, product, line FROM production_lists'\r\n        return new Promise(async (resolve, reject) => {\r\n            await db.query(q, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por opções de Modelos e produtos')\r\n                    reject(err)\r\n                }\r\n                const models: { [key: string]: { value: string, label: string } } = {}\r\n\r\n                if (data && data.length > 0) {\r\n                    // para opções de modelos\r\n                    data.map((row: { model: string }) => {\r\n                        if (!models[row.model]) {\r\n                            models[row.model] = { value: row.model, label: row.model }\r\n                        }\r\n                        return { label: row.model, value: row.model }\r\n                    })\r\n                    // para opções de produtos\r\n                    const products: { [key: string]: { value: string, label: string } } = {}\r\n                    data.map((row: { product: string }) => {\r\n                        if (!products[row.product]) {\r\n                            products[row.product] = { label: row.product, value: row.product }\r\n                        }\r\n                        return { label: row.product, value: row.product }\r\n                    })\r\n                    const lines: { [key: string]: { value: string, label: string } } = {}\r\n                    data.map((row: { line: string }) => {\r\n                        if (!lines[row.line]) {\r\n                            lines[row.line] = { label: row.line, value: row.line }\r\n                        }\r\n                        return { label: row.line, value: row.line }\r\n                    })\r\n\r\n                    resolve(\r\n                        {\r\n                            models: Object.keys(models).map(key => models[key]),\r\n                            products: Object.keys(products).map(key => products[key]),\r\n                            lines: Object.keys(lines).map(key => lines[key])\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para procurar se existe uma lista com model e produto e linha iguai na tabela de listas de produção\r\nexport const exsitsThisListInProductionLists = (model: string, product: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT content FROM production_lists WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por lista bna tabela de lista de produção!')\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Existe listas na tabela de listas de engenharia que usam esse modelo e produto')\r\n                    resolve({ status: true, content: data[0].content })\r\n                } else {\r\n                    resolve({ status: false, content: [] })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para criar uma nova lista\r\nexport const saveNewListInProductionLists = async (model: string, product: string, line: string, content: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'INSERT INTO production_lists (model, product, line, content) VALUES (?, ?, ?, ?)'\r\n            await db.query(q, [model, product, line, content], (err, data) => {\r\n                if (err) {\r\n                    reject(err)\r\n                }\r\n                if (data && data.affectedRows > 0) {\r\n                    resolve('Dados inseridos com sucesso na tabela de lista de produção!')\r\n                } else {\r\n                    reject('Erro ao inserir os dados na tabela de lista de produção')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para atualizar os dados na lista de produção\r\nexport const updateListInProductionLists = (model: string, product: string, line: string, content: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'UPDATE production_lists SET content = ? WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [content, model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao atualizar uma lista na tabela de listas de produção!', err)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Arquivos atualizados com sucesso na tabela de lista de produção', data)\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram atualizados na tabela de lista de produção!')\r\n                    reject('Nenhum dado atualizado na tabela de lista de produção!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n\r\n"]}
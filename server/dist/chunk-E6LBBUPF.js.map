{"version":3,"sources":["../src/controllers/engineerCtrl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIA,OAAO,UAAU;AAEjB,OAAO,QAAQ;AANf,IAiBa;AAjBb;AAAA;AAEA;AAMA;AASO,IAAM,aAAa,OAAO,KAAc,QAAkB;AAC7D,UAAI;AAGA,cAAM,WAAmB,KAAK,QAAQ,WAAW,8BAA8B,IAAI,MAAM,YAAY,EAAE;AAEvG,cAAM,WAAW,mCAAmC,QAAQ;AAE5D,cAAM,QAAgB,UAAU,SAAS;AAEzC,cAAM,UAAkB,UAAU,WAAW;AAE7C,cAAM,UAAkB,UAAU,WAAW;AAE7C,cAAM,OAAe,UAAU,QAAQ;AAEvC,cAAM,eAAe,MAAM,gCAAgC,OAAiB,OAAiB;AAC7F,YAAI,cAAc;AAEd,gBAAM,6BAA8B,OAAO,SAAS,SAAS,IAAI;AAAA,QACrE,OAAO;AAEH,gBAAM,6BAA8B,OAAO,SAAS,SAAS,IAAI;AAAA,QACrE;AAEA,cAAM,gBAAgB,MAAM,oDAAoD,OAAO,OAAO;AAE9F,YAAI,cAAc,QAAQ;AACtB,wBAAc,QAAQ,QAAQ,CAAC,SAA2B;AACtD,kBAAM,OAAO,mBAAmB,UAAU,KAAK,IAAI;AACnD,2CAA+B,MAAM,SAAmB,OAAO,SAAS,KAAK,IAAI;AAAA,UACrF,CAAC;AAAA,QACL,OAAO;AACH,kBAAQ,IAAI,aAAa;AAAA,QAC7B;AACA,WAAG,OAAO,UAAU,CAAC,QAAQ;AACzB,cAAI,KAAK;AACL,oBAAQ,IAAI,4BAA4B;AAAA,UAC5C;AACA,kBAAQ,IAAI,kCAA+B;AAAA,QAC/C,CAAC;AACD,YAAI,OAAO,GAAG,EAAE,KAAK,0CAAiC;AAAA,MAC1D,SAAS,OAAO;AACZ,YAAI,OAAO,GAAG,EAAE,KAAK,KAAK;AAAA,MAC9B;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { convertExcelToJson, convertExcelToJsonWithoutAlterLine } from '../commonFunctions/convertExcelToJson'\r\n\r\nimport path from 'node:path'\r\n\r\nimport fs from 'node:fs'\r\n\r\nimport {\r\n    exsitsThisListIEngineeringLists,\r\n    exsitsListsWithThisModelAndProductInProductionLists,\r\n    insertListInEngineeringLists,\r\n    updateContentInProductionLists,\r\n    updateListInEngineeringLists\r\n} from \"../models/engineer\";\r\n\r\n// para engenharia criar a listas\r\nexport const createList = async (req: Request, res: Response) => {\r\n    try {\r\n\r\n        // prgando o caminho do arquivo que foi enviado\r\n        const filePath: string = path.resolve(__dirname, `../../00_engineering_lists/${req.file?.originalname}`)\r\n        // convertendo o conteúdo do arquivo em json\r\n        const jsonData = convertExcelToJsonWithoutAlterLine(filePath)\r\n        // pegando o modelo desse conteúdo\r\n        const model: string = jsonData?.model ?? ''\r\n        // pegando o produto desse conteúdo\r\n        const product: string = jsonData?.product ?? ''\r\n        // pegando o conteúdo de instruções\r\n        const content: string = jsonData?.content ?? ''\r\n        //pegando o conteúdo da linha\r\n        const line: string = jsonData?.line ?? 'error'\r\n        // procurando se existe uma lista na tabela de listas de engenharia com esse modelo e produto\r\n        const existListEng = await exsitsThisListIEngineeringLists(model as string, product as string)\r\n        if (existListEng) {\r\n            // se já existir deve ser atualizada\r\n            await updateListInEngineeringLists( model, product, content, line)\r\n        } else {\r\n            // se não deve ser inserida\r\n            await insertListInEngineeringLists( model, product, content, line)\r\n        }\r\n        // procurando se existe já existe uma lista na tabela de lista de produção com modelo e produto\r\n        const existListProd = await exsitsListsWithThisModelAndProductInProductionLists(model, product) as { status: boolean, content: { line: string }[] }\r\n        // se exitir atualiza cada um dessas listas\r\n        if (existListProd.status) {\r\n            existListProd.content.forEach((list: { line: string }) => {\r\n                const json = convertExcelToJson(filePath, list.line)\r\n                updateContentInProductionLists(json?.content as string, model, product, list.line)\r\n            })\r\n        } else {\r\n            console.log(existListProd)\r\n        }\r\n        fs.unlink(filePath, (err) => {\r\n            if (err) {\r\n                console.log('Erro ao excluir o arquivo!')\r\n            }\r\n            console.log('Arquivo excluído com sucesso!')\r\n        })\r\n        res.status(200).json('Operação concluída com sucesso!')\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}\r\n"]}
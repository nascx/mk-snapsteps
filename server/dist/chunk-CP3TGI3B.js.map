{"version":3,"sources":["../src/models/engineer.ts"],"names":[],"mappings":"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","sourcesContent":["import { db } from \"../config/db\"\r\n\r\n// para procurar se já existe uma lista na tabela de listas da engenharia\r\nexport const exsitsThisListIEngineeringLists = (model: string, product: string) => {\r\n    try {\r\n        console.log('----------')\r\n        console.log('Começando a verificação se já existe essa lista na tabela de lista de engenharia')\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT id FROM engineering_lists WHERE model = ? AND product = ?'\r\n            const values = [model, product]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Ocorreu um erro na verificação!', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Essa lista já existe')\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Não foi encontrada nenhuma lista')\r\n                    resolve(false)\r\n                }\r\n            })\r\n            console.log('----------')\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para inserir uma lista na tabela de listas da engenharia\r\nexport const insertListInEngineeringLists = (model: string, product: string, content: string, line: string) => {\r\n    try {\r\n        console.log('Começando inserção de dados!')\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'INSERT INTO engineering_lists ( model, product, content, line) VALUES (?, ?, ?, ?)'\r\n            const values = [model, product, content, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao inserir dados!', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.affectedRows > 0) {\r\n                    console.log('Arquivos inseridos com sucesso')\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram inseridos!')\r\n                    reject('Nenhum dado inserido na tabela de lista de engenharia!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para atualizar os dados de uma lista que está na tabela de listas de engenharia \r\nexport const updateListInEngineeringLists = (model: string, product: string, content: string, line: string) => {\r\n    try {\r\n        console.log('começando a atualização do conteudo')\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'UPDATE engineering_lists SET content = ? WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [content, model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao atualizar uma lista', err)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Arquivos atualizados com sucesso')\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram atualizados!')\r\n                    reject('Nenhum dado atualizado na tabela de lista de engenharia!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para procurar se existe uma lista com model e produto iguai na tabela de listas de produção\r\nexport const exsitsListsWithThisModelAndProductInProductionLists = (model: string, product: string) => {\r\n    try {\r\n        console.log('Começando a verificação se existe esta lista na tebala da produção')\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT line FROM production_lists WHERE model = ? AND product = ?'\r\n            const values = [model, product]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por lista bna tabela de lista de produção!')\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Existe listas na tabela de listas de engenharia que usam esse modelo e produto')\r\n                    resolve({ status: true, content: data })\r\n                } else {\r\n                    resolve({ status: false, content: [] })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para atualizar as listas com na tabela de listas de produção\r\nexport const updateContentInProductionLists = (content: string, model: string, product: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'UPDATE production_lists SET content = ? WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [content, model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log(`Erro ao atualizar o conteúdo: ${model}-${product}-${line}`)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Dados de lista de produção atualizados')\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo o conteúdo da lista de produção não foi atualizado!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n\r\n}"]}
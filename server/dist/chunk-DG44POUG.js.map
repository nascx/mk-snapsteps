{"version":3,"sources":["../src/models/auth.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAEa;AAFb;AAAA;AAAA;AAEO,IAAM,cAAc,OAAO,WAAmB;AACjD,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,SAAS;AACvC,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,EAAE,QAAQ,MAAM,SAAS,KAAK,CAAC,EAAE,SAAS,CAAC;AAAA,YACvD,OAAO;AACH,sBAAQ,EAAE,QAAQ,OAAO,SAAS,4BAAyB,CAAC;AAAA,YAChE;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { db } from \"../config/db\";\r\n\r\nexport const getPassword = async (sector: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT password FROM users WHERE sector = ?'\r\n            await db.query(q, [sector], (err, data) => {\r\n                if (err) {\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    resolve({ status: true, message: data[0].password })\r\n                } else {\r\n                    resolve({ status: false, message: 'Este setor n√£o existe!' })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}"]}
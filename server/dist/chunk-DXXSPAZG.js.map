{"version":3,"sources":["../src/controllers/sgiCtrl.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,UAAU;AAUjB,SAAS,oBAAoB,UAAkB;AAC3C,SAAO,SAAS,QAAQ,aAAa,EAAE;AAC3C;AAbA,IAMM,WAGA,YAMO,gBAmBP,oBA6EO;AA/Gb;AAAA;AAEA;AAIA,IAAM,YAAY,UAAQ,cAAc;AAGxC,IAAM,aAAa,UAAQ,uBAAuB;AAM3C,IAAM,iBAAiB,OAAO,KAAc,QAAkB;AACjE,UAAI;AAEA,cAAM,OAAO,oBAAoB,KAAK,MAAM,QAAkB;AAC9D,cAAM,WAAmB,KAAK,KAAK,WAAW,WAAW,IAAI,MAAM,YAAY,EAAE;AAEjF,cAAM,KAAK,MAAM,aAAa,QAAQ;AAEtC,YAAI,CAAC,GAAG,QAAQ;AACZ,gBAAM,SAAS,UAAU,IAAI;AAAA,QACjC,OAAO;AACH,kBAAQ,IAAI,+CAAyC;AAAA,QACzD;AACA,YAAI,OAAO,GAAG,EAAE,KAAK,eAAe;AAAA,MACxC,SAAS,OAAO;AACZ,YAAI,OAAO,GAAG,EAAE,KAAK,KAAK;AAAA,MAC9B;AAAA,IACJ;AAEA,IAAM,qBAAqB,OAAO,UAAkB,cAAsB;AACtE,UAAI;AAsEA,eAAO,CAAC;AAAA,MACZ,SAAS,OAAO;AACZ,gBAAQ,IAAI,KAAK;AAAA,MACrB;AAAA,IACJ;AAEO,IAAM,0BAA0B,OAAO,KAAc,QAAkB;AAC1E,UAAI;AAEA,cAAM,cAAsB,KAAK,KAAK,WAAW,kBAAkB,IAAI,MAAM,YAAY,EAAE;AAE3F,cAAM,YAAoB,KAAK,KAAK,WAAW,iBAAiB,QAAQ,EAAE;AAE1E,cAAM,EAAE,MAAM,MAAM,IAAI,MAAM,mBAAmB,aAAa,SAAS;AAEvE,gBAAQ,IAAI,UAAU,IAAI;AAkB1B,YAAI,OAAO,GAAG,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAAA,MACxC,SAAS,OAAO;AACZ,YAAI,OAAO,GAAG,EAAE,KAAK,KAAK;AAAA,MAC9B;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { Request, Response } from \"express\";\r\nimport path from 'node:path'\r\nimport { existsThisIT, existsThisQAFile, insertIT, insertQAFile } from \"../models/sgi\";\r\nimport fs from 'node:fs'\r\n\r\n//importação da biblioteca para converter pdf para excel\r\nconst pdf2excel = require('pdf-to-excel')\r\n\r\n//importação da biblioteca para converter excel em json\r\nconst excel2json = require('convert-excel-to-json')\r\n\r\nfunction removeFileExtension(filename: string) {\r\n    return filename.replace(/\\.[^/.]+$/, \"\");\r\n}\r\n\r\nexport const handleUploadIT = async (req: Request, res: Response) => {\r\n    try {\r\n        //pegando o caminho da IT\r\n        const name = removeFileExtension(req?.file?.filename as string)\r\n        const filePath: string = path.join(__dirname, `../_its/${req.file?.originalname}`)\r\n        //pesquisando se já existe esse arquivo salvo na base de dados\r\n        const it = await existsThisIT(filePath) as { status: boolean }\r\n        // se não exsitir deve inserir\r\n        if (!it.status) {\r\n            await insertIT(filePath, name)\r\n        } else {\r\n            console.log('Arquivo já está salvo na base de dados!')\r\n        }\r\n        res.status(200).json('Dados salvos!')\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}\r\n\r\nconst getInfosFromQAFile = async (filePath: string, excelPath: string) => {\r\n    try {\r\n\r\n        /* const pdf = require('pdf-parse');\r\n        const XLSX = require('xlsx');\r\n\r\n        // Leitura do arquivo PDF \r\n        let dataBuffer = fs.readFileSync(filePath);\r\n \r\n        pdf(dataBuffer).then(data => {\r\n            // Aqui, 'data.text' contém o texto extraído do PDF\r\n            let lines = data.text.split('\\n');\r\n            let worksheet = XLSX.utils.aoa_to_sheet(lines.map(line => [line]));\r\n            let workbook = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n\r\n            // Salvando o arquivo Excel\r\n            XLSX.writeFile(workbook, excelPath);\r\n            console.log('Arquivo Excel criado com sucesso!');\r\n        }); */\r\n\r\n\r\n        /* //criando o arquivo excel\r\n        await pdf2excel.genXlsx(filePath, excelPath)\r\n\r\n        //convertendo o excel em json\r\n        const json = await excel2json({ sourceFile: excelPath, header: { rows: 1 } })\r\n\r\n        //obtendo as informções do json\r\n        const jsonInfos: { A: string }[] = json.Sheet1\r\n\r\n        // pegando o objeto aonde estão as informações de título\r\n        const titleJson: { [key: string]: string } = jsonInfos[1]\r\n\r\n        // criando a variável para armazenar a string que contem o conteúdo do título\r\n        let title = ''\r\n\r\n        // criando um contador para obter aumentar ao percorrer o objeto e encontrar o indice certo\r\n        let count = 0\r\n\r\n        // percorrendo o objeto até pegar o conteúdo do titulo\r\n        for (let key in titleJson) {\r\n            if (count > 2) {\r\n                title += titleJson[key];\r\n            }\r\n            count++\r\n        }\r\n\r\n        // pegando o objeto aonde está as informações do código\r\n        const codeJson: { [key: string]: string } = jsonInfos[5]\r\n\r\n        // criando variável para armazenar o valor do código\r\n        let code = ''\r\n\r\n        // criando um contador para achar o indice certo\r\n        let i = 0\r\n\r\n        // percorrendo o objeto até achar o valor correto\r\n        for (let key in codeJson) {\r\n            if (codeJson[key] === 'CÓDIGO:') {\r\n                let index = 0\r\n                for (let key in codeJson) {\r\n                    if (index === i + 2) {\r\n                        code = codeJson[key]\r\n                    }\r\n                    index++\r\n                }\r\n            }\r\n            i++\r\n        } */\r\n\r\n        return {}\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const handleUploadQualityFile = async (req: Request, res: Response) => {\r\n    try {\r\n\r\n        const orginalPath: string = path.join(__dirname, `../../_quality/${req.file?.originalname}`)\r\n\r\n        const excelPath: string = path.join(__dirname, `../../_excels/${'a.xlsx'}`)\r\n\r\n        const { code, title } = await getInfosFromQAFile(orginalPath, excelPath) as { code: string, title: string }\r\n\r\n        console.log('code: ', code)\r\n        /* const qaFile = await existsThisQAFile(code) as {status: boolean} */\r\n\r\n        /* const filePath: string = path.join(__dirname, `../../_quality/${code}.pdf`) */\r\n\r\n        /* fs.renameSync(orginalPath, filePath) */\r\n\r\n        /* if (qaFile.status) {\r\n            console.log('Já existe IT do QA com esse código')\r\n        } else {\r\n           \r\n        } */\r\n\r\n        /* await insertQAFile(code, title, filePath) */\r\n\r\n\r\n        /* fs.unlinkSync(excelPath) */\r\n\r\n        res.status(200).json({ code, title })\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}"]}
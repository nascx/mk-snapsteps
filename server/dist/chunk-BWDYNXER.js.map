{"version":3,"sources":["../src/controllers/producionCtrl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport {\r\n    exsitsThisListInProductionLists,\r\n    getContentFromEngineeringList,\r\n    getContentFromProductionList,\r\n    saveNewListInProductionLists,\r\n    searchByModelAndProductOptions,\r\n    searchByModelAndProductOptionsAndLine,\r\n    updateListInProductionLists\r\n} from \"../models/production\";\r\nimport { exsitsListsWithThisModelAndProductInProductionLists, updateContentInProductionLists } from \"../models/engineer\";\r\nimport { convertJsonToExcel } from \"../commonFunctions/convertJsonToExcel\";\r\nimport { convertExcelToJsonWithoutAlterLine, convertExcelToJson } from \"../commonFunctions/convertExcelToJson\";\r\nimport path from 'node:path'\r\nimport fs from 'node:fs'\r\n\r\nexport const downloadList = async (req: Request, res: Response) => {\r\n    try {\r\n        const { model, product, line } = req.query\r\n        const productionList = await getContentFromProductionList(model as string, product as string, line as string) as { status: boolean, content: [] }\r\n        if (productionList.status) {\r\n            const content = productionList.content\r\n            const workbook = await convertJsonToExcel(content)\r\n            workbook.xlsx.writeBuffer().then((data: any) => {\r\n                res.setHeader('Content-Disposition', `attachment; filename=\"1.xlsx\"`);\r\n                res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n                res.send(data)\r\n            })\r\n        } else {\r\n            const engineeringList = await getContentFromEngineeringList(model as string, product as string) as { status: boolean, content: [] }\r\n            if (engineeringList.status) {\r\n                const content = engineeringList.content\r\n                const workbook = await convertJsonToExcel(content)\r\n                workbook.xlsx.writeBuffer().then((data: any) => {\r\n                    res.setHeader('Content-Disposition', `attachment; filename=\"1.xlsx\"`);\r\n                    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n                    res.send(data)\r\n                })\r\n            } else {\r\n                res.status(400).json('Não existe lista com esse modelo e produto!')\r\n            }\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}\r\n\r\nexport const getModelAndProductOptions = async (req: Request, res: Response) => {\r\n    try {\r\n        const options = await searchByModelAndProductOptions()\r\n        res.status(200).json(options)\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}\r\n\r\nexport const getModelProductOptionsAndLine = async (req: Request, res: Response) => {\r\n    try {\r\n        const options = await searchByModelAndProductOptionsAndLine()\r\n        res.status(200).json(options)\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}\r\n\r\n// para upload de lista de produção\r\nexport const uploadProductionLists = async (req: Request, res: Response) => {\r\n    try {\r\n        // pegando o caminho do arquivo \r\n        const filePath: string = path.resolve(__dirname, `../../00_production_lists/${req.file?.originalname}`)\r\n        // convertendo o conteúdo do arquivo em json\r\n        const jsonData = convertExcelToJsonWithoutAlterLine(filePath)\r\n        // pegando o modelo desse conteúdo\r\n        const model: string = jsonData?.model as string\r\n        // pegando o produto desse conteúdo\r\n        const product: string = jsonData?.product as string\r\n        // pegando a linha\r\n        const line: string = jsonData?.line as string\r\n        // pegando o conteúdo de instruções\r\n        const content: string = jsonData?.content as string\r\n        // agora pesquisa se dentro dessas tem uma com a linha especifica.\r\n        const existThisListProd = await exsitsThisListInProductionLists(model, product, line) as { status: boolean }\r\n        if (existThisListProd.status) {\r\n            console.log('Já exite lista com esse modelo e produto e linha')\r\n            await updateListInProductionLists(model, product, line, content)\r\n        } else {\r\n            console.log('Ainda não existe lista com esse modelo produto e linha')\r\n            await saveNewListInProductionLists(model, product, line, content)\r\n        }\r\n        // apagando o arquivo do disco local.\r\n        fs.unlink(filePath, (err) => {\r\n            if (err) {\r\n                console.log('Erro ao excluir o arquivo!')\r\n            }\r\n            console.log('Arquivo excluído com sucesso!')\r\n        })\r\n        // enviando uma resposta de confirmação de que todos os processos foram concluidos\r\n        res.status(200).json('Operação concluída com sucesso!')\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n        console.log(error)\r\n    }\r\n}\r\n\r\ninterface HashStore {\r\n    [key: string]: {it: string, page: number}[];\r\n}\r\n\r\n// para devolver a IT com base na lista\r\nexport const sendIT = async (req: Request, res: Response) => {\r\n    try {\r\n        // obtendo as informações da requisição\r\n        const { model, product, line } = req.query\r\n        // verificando se essa combinação de informações existe\r\n        const prodList = await exsitsThisListInProductionLists(model as string, product as string, line as string) as { status: boolean, content: string }\r\n        // se existir deve pegar o conteúdo\r\n        if (prodList.status) {\r\n            // transformando em json\r\n            const jsonData = JSON.parse(prodList.content)\r\n            // criando um objeto para salvar as informações de cada it\r\n            const postInfos: HashStore = {}\r\n            const posts: string[] = []\r\n            jsonData.map((row: { it: string, page: string, post: string }, i: number) => {\r\n                if (i > 0) {\r\n                    if (!postInfos[row.post]) {\r\n                        postInfos[row.post] = []\r\n                        postInfos[row.post].push({it: row.it, page: Number(row.page)})\r\n                        posts.push(String(row.post))\r\n                    } else {\r\n                        postInfos[row.post].push({it: row.it, page: Number(row.page)})\r\n                    }\r\n                }\r\n            })\r\n            res.status(200).json({ postInfos, posts })\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json(error)\r\n    }\r\n}"]}
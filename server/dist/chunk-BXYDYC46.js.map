{"version":3,"sources":["../src/models/quality.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAEa;AAFb;AAAA;AAAA;AAEO,IAAM,gBAAgB,CAAC,UAAkB;AAC5C,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,SAAS;AAC3D,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,CAAC,CAAC;AAAA,YACd;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IAEJ;AAAA;AAAA","sourcesContent":["import { db } from \"../config/db\";\r\n\r\nexport const searchQAFiles = (value: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT code, title, path FROM qa_files WHERE code LIKE ? OR title LIKE ?';\r\n            await db.query(q, [`%${value}%`, `%${value}%`], (err, data) => {\r\n                if (err) {\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    resolve(data)\r\n                } else {\r\n                    resolve([])\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n\r\n}"]}
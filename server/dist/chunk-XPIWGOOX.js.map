{"version":3,"sources":["../src/models/engineer.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAGa,iCAwBA,8BAyBA,8BAyBA,qDAwBA;AArGb;AAAA;AAAA;AAGO,IAAM,kCAAkC,CAAC,OAAe,YAAoB;AAC/E,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,OAAO,OAAO;AAC9B,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,0EAAuE,GAAG;AACtF,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,0EAAuE;AACnF,sBAAQ,KAAK;AAAA,YACjB;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,+BAA+B,CAAE,OAAe,SAAiB,SAAiB,SAAiB;AAC5G,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAE,OAAO,SAAS,SAAS,IAAI;AAC9C,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,gEAAgE,GAAG;AAC/E,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,eAAe,GAAG;AAC/B,sBAAQ,IAAI,kCAAkC,IAAI;AAClD,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,mDAAgD;AAC5D,qBAAO,wDAAwD;AAAA,YACnE;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,+BAA+B,CAAE,OAAe,SAAiB,SAAiB,SAAiB;AAC5G,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,SAAS,OAAO,SAAS,IAAI;AAC7C,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,kEAAkE,GAAG;AACjF,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,KAAK,eAAe,GAAG;AACvB,sBAAQ,IAAI,oCAAoC,IAAI;AACpD,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,qDAAkD;AAC9D,qBAAO,0DAA0D;AAAA,YACrE;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,sDAAsD,CAAC,OAAe,YAAoB;AACnG,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,OAAO,OAAO;AAC9B,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,iEAA2D;AACvE,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAG;AACzB,sBAAQ,IAAI,gFAAgF;AAC5F,sBAAQ,EAAE,QAAQ,MAAM,SAAS,KAAK,CAAC;AAAA,YAC3C,OAAO;AACH,sBAAQ,EAAE,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC;AAAA,YAC1C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAGO,IAAM,iCAAiC,CAAC,SAAiB,OAAe,SAAiB,SAAiB;AAC7G,UAAI;AACA,eAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,gBAAM,IAAI;AACV,gBAAM,SAAS,CAAC,SAAS,OAAO,SAAS,IAAI;AAC7C,gBAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,sBAAQ,IAAI,oCAAiC,KAAK,IAAI,OAAO,IAAI,IAAI,EAAE;AACvE,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,KAAK,eAAe,GAAG;AACvB,sBAAQ,IAAI,8CAAwC;AACpD,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,kFAAsE;AAAA,YACtF;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IAEJ;AAAA;AAAA","sourcesContent":["import { db } from \"../config/db\"\r\n\r\n// para procurar se já existe uma lista na tabela de listas da engenharia\r\nexport const exsitsThisListIEngineeringLists = (model: string, product: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT id FROM engineering_lists WHERE model = ? AND product = ?'\r\n            const values = [model, product]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao fazer consulta se existe está lista na lista de engenharia!', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Nada encontrado na busca se existe está lista na lista de engenharia!')\r\n                    resolve(false)\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para inserir uma lista na tabela de listas da engenharia\r\nexport const insertListInEngineeringLists = ( model: string, product: string, content: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'INSERT INTO engineering_lists ( model, product, content, line) VALUES (?, ?, ?, ?)'\r\n            const values = [ model, product, content, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao inserir uma lista na tabela de listas da engenharia!', err)\r\n                    reject(err)\r\n                }\r\n                if (data && data.affectedRows > 0) {\r\n                    console.log('Arquivos inseridos com sucesso', data)\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram inseridos!')\r\n                    reject('Nenhum dado inserido na tabela de lista de engenharia!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para atualizar os dados de uma lista que está na tabela de listas de engenharia \r\nexport const updateListInEngineeringLists = ( model: string, product: string, content: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'UPDATE engineering_lists SET content = ? WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [content, model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao atualizar uma lista na tabela de listas da engenharia!', err)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Arquivos atualizados com sucesso', data)\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram atualizados!')\r\n                    reject('Nenhum dado atualizado na tabela de lista de engenharia!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para procurar se existe uma lista com model e produto iguai na tabela de listas de produção\r\nexport const exsitsListsWithThisModelAndProductInProductionLists = (model: string, product: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'SELECT line FROM production_lists WHERE model = ? AND product = ?'\r\n            const values = [model, product]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log('Erro ao buscar por lista bna tabela de lista de produção!')\r\n                    reject(err)\r\n                }\r\n                if (data && data.length > 0) {\r\n                    console.log('Existe listas na tabela de listas de engenharia que usam esse modelo e produto')\r\n                    resolve({ status: true, content: data })\r\n                } else {\r\n                    resolve({ status: false, content: [] })\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\n// para atualizar as listas com na tabela de listas de produção\r\nexport const updateContentInProductionLists = (content: string, model: string, product: string, line: string) => {\r\n    try {\r\n        return new Promise(async (resolve, reject) => {\r\n            const q = 'UPDATE production_lists SET content = ? WHERE model = ? AND product = ? AND line = ?'\r\n            const values = [content, model, product, line]\r\n            await db.query(q, values, (err, data) => {\r\n                if (err) {\r\n                    console.log(`Erro ao atualizar o conteúdo: ${model}-${product}-${line}`)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Dados de lista de produção atualizados')\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo o conteúdo da lista de produção não foi atualizado!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n\r\n}"]}
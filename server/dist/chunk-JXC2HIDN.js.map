{"version":3,"sources":["../src/models/sgi.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAEa,cAoBA,UAsBA,kBAoBA;AAhEb;AAAA;AAAA;AAEO,IAAM,eAAe,CAAC,SAAiB;AAC3C,UAAI;AACH,eAAO,IAAI,QAAQ,OAAM,SAAS,WAAW;AACzC,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAI;AAC1B,sBAAQ,EAAC,QAAQ,KAAI,CAAC;AAAA,YAC1B,OAAO;AACH,sBAAQ,EAAC,QAAQ,MAAK,CAAC;AAAA,YAC3B;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACF,SAAS,OAAO;AACf,cAAM;AAAA,MACP;AAAA,IACH;AAEO,IAAM,WAAW,CAAC,MAAc,SAAiB;AACpD,UAAI;AACA,eAAO,IAAI,QAAQ,OAAM,SAAS,WAAW;AACzC,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,SAAS;AAC3C,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,KAAK,eAAe,GAAG;AACvB,sBAAQ,IAAI,+CAA+C,IAAI;AAC/D,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,oEAAiE;AAC7E,qBAAO,wCAAwC;AAAA,YACnD;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAEO,IAAM,mBAAmB,CAAC,SAAiB;AAC9C,UAAI;AACH,eAAO,IAAI,QAAQ,OAAM,SAAS,WAAW;AACzC,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,SAAS;AACrC,gBAAI,KAAK;AACL,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,SAAS,GAAI;AAC1B,sBAAQ,EAAC,QAAQ,KAAI,CAAC;AAAA,YAC1B,OAAO;AACH,sBAAQ,EAAC,QAAQ,MAAK,CAAC;AAAA,YAC3B;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACF,SAAS,OAAO;AACf,cAAM;AAAA,MACP;AAAA,IACJ;AAEO,IAAM,eAAe,CAAC,MAAc,OAAe,SAAiB;AACvE,UAAI;AACA,eAAO,IAAI,QAAQ,OAAM,SAAS,WAAW;AACzC,gBAAM,IAAI;AACV,gBAAM,GAAG,MAAM,GAAG,CAAC,MAAM,OAAO,IAAI,GAAG,CAAC,KAAK,SAAS;AAClD,gBAAI,KAAK;AACL,sBAAQ,IAAI,GAAG;AACf,qBAAO,GAAG;AAAA,YACd;AACA,gBAAI,KAAK,eAAe,GAAG;AACvB,sBAAQ,IAAI,0DAA0D,IAAI;AAC1E,sBAAQ,IAAI;AAAA,YAChB,OAAO;AACH,sBAAQ,IAAI,+EAA4E;AACxF,qBAAO,wCAAwC;AAAA,YACnD;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA","sourcesContent":["import { db } from \"../config/db\";\r\n\r\nexport const existsThisIT = (path: string) => {\r\n   try {\r\n    return new Promise(async(resolve, reject) => {\r\n        const q = 'SELECT name FROM its WHERE path = ?'\r\n        await db.query(q, [path], (err, data) => {\r\n            if (err) {\r\n                reject(err)\r\n            }\r\n            if (data && data.length > 0 ) {\r\n                resolve({status: true})\r\n            } else {\r\n                resolve({status: false})\r\n            }\r\n        })\r\n    })\r\n   } catch (error) {\r\n    throw error\r\n   } \r\n}\r\n\r\nexport const insertIT = (path: string, name: string) => {\r\n    try {\r\n        return new Promise(async(resolve, reject) => {\r\n            const q = 'INSERT INTO its (path, name) VALUES (?, ?)'\r\n            await db.query(q, [path, name], (err, data) => {\r\n                if (err) {\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Arquivos inserido com sucesso na tabela its', data)\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram inseridos na tabela de its!')\r\n                    reject('Nenhum dado inserido na tabela de its!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const existsThisQAFile = (code: string) => {\r\n    try {\r\n     return new Promise(async(resolve, reject) => {\r\n         const q = 'SELECT title FROM qa_files WHERE code = ?'\r\n         await db.query(q, [code], (err, data) => {\r\n             if (err) {\r\n                 reject(err)\r\n             }\r\n             if (data && data.length > 0 ) {\r\n                 resolve({status: true})\r\n             } else {\r\n                 resolve({status: false})\r\n             }\r\n         })\r\n     })\r\n    } catch (error) {\r\n     throw error\r\n    } \r\n}\r\n\r\nexport const insertQAFile = (code: string, title: string, path: string) => {\r\n    try {\r\n        return new Promise(async(resolve, reject) => {\r\n            const q = 'INSERT INTO qa_files (code, title, path) VALUES (?, ?, ?)'\r\n            await db.query(q, [code, title, path], (err, data) => {\r\n                if (err) {\r\n                    console.log(err)\r\n                    reject(err)\r\n                }\r\n                if (data.affectedRows > 0) {\r\n                    console.log('Arquivos inserido com sucesso na tabela arquivos do qa', data)\r\n                    resolve(true)\r\n                } else {\r\n                    console.log('Por algum motivo os dados não foram inseridos na tabela de arquivos do qa!')\r\n                    reject('Nenhum dado inserido na tabela de its!')\r\n                }\r\n            })\r\n        })\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}"]}